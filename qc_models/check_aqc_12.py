#local gradient climatology check
'''
This check identifies temperature observations for which its vertical temperature gradient exceeds the local depth-dependent gradient climatological range
We calculate the mean temperature gradient (∇T) at level k using central differences 
Here, the IAP-TG-range are used as the local climatological vertical gradient range
For a temperature observation (T) in level k, its corresponding vertical gradient value falls outside the local monthly depth-dependent range are flagged as 1
The main function of this check is 'gradient_climatology_check'

'''


import sys
from COMSQC.util import aqc_constant as const
from scipy.interpolate import interp1d
import itertools
import numpy.ma as ma
import numpy as np
# from numba import jit

# @jit(nopython=True)
def profile_mean_gradient_QC(meta,tem,depth,makeMean_gradient,depth_interval_left=10,depth_interval_right=12.5):
    dtdz=np.full(meta.levels,np.nan)
    dz=np.concatenate(([0],np.diff(depth)))

    for k in range(1,meta.levels):
        if(makeMean_gradient[k]):
            index=k
            #find  depth indexs
            i=1
            flag=1   ##right side is 1, left side is 2
            depth_inteval=0
            loop_time=1
            left_index,right_index=np.nan,np.nan

            if(depth[-1]-depth[k]>=10):
                while(depth_inteval<depth_interval_right):
                    if(loop_time==1):
                        depth_inteval=dz[index]
                        left_index=index-1
                        right_index=index
                    elif(flag==1):
                        try:
                            depth_inteval=depth_inteval+dz[index+i]
                        except:
                            break
                        flag=2 
                        right_index=right_index+1
                    else:
                        try:
                            depth_inteval = depth_inteval + dz[index - i]
                        except:
                            break
                        flag=1  
                        left_index=left_index-1
                        i=i+1
                    loop_time=loop_time+1
                    if(depth_inteval>depth_interval_left):
                        break

                if(left_index<0):
                    left_index=0
                if(right_index>=meta.levels-1):
                    right_index=meta.levels-1

                ###caculatfe the central difference of gradient with mean temperature
                if(depth_inteval<=7):  ##不够10m，一条廓线，特别是最开始的几个点 和最后的几个点，depth_interval前后不够位置差分，导致算出来的梯度很大
                    #采用单边差分补足5m
                    if(right_index==meta.levels-1):  #For the points near final depth，using single difference with minimum depth interval (5m)
                        while((depth[k]-depth[left_index])<5):
                            left_index=left_index-1
                        depth_inteval=depth[right_index]-depth[left_index]
                    else:
                        dtdz[k]=np.nan

                temp_select=tem[left_index:right_index+1]
                depth_select=depth[left_index:right_index+1]
                depth_interp=np.arange(depth[k]-5,depth[k]+6)
                try:
                    tem_interp = np.interp(depth_interp, depth_select, temp_select, left=np.nan, right=np.nan,
                                          period=None)
                except:  
                    temp_left=np.nanmean(tem[left_index:k+1])
                    temp_right=np.nanmean(tem[k+1:right_index+1])
                    dtdz[k]=(temp_right-temp_left)/depth_inteval
                    continue
                temp_left=np.nanmean(tem_interp[:6])
                temp_right=np.nanmean(tem_interp[6:])
                dtdz[k]=(temp_right-temp_left)/10
            else:  ##For the points near final depth，using single difference with minimum depth interval (5m)
                if(meta.levels>=10):
                    right_index=k
                    left_index=right_index-1
                    while((depth[k]-depth[left_index])<5):
                        if(left_index==0):
                            break
                        left_index=left_index-1
                    depth_inteval=depth[right_index]-depth[left_index]
                    temp_right=tem[right_index]
                    temp_left=np.nanmean(tem[left_index:right_index])
                    dtdz[k]=(temp_right-temp_left)/depth_inteval

    return dtdz

def climatology_horzional_interp(data_5D,ix,jy,interp_grid,month):
    horzional_interval = np.array([10, 20, 40, 60, 100, 160])
    horizonal_interval_interp = np.arange(10,161)
    data_grid=np.squeeze(data_5D[ix,jy,:,month-1,:])
    data_grid_interp=np.full((79,len(horizonal_interval_interp)),int)
    for k in range(79):
        # f = interp1d(horzional_interval, np.squeeze(data_grid[k,:]), kind='linear', bounds_error=False)
        # data_grid_interp[k]=f(horizonal_interval_interp)
        data_grid_interp[k] = np.interp(horizonal_interval_interp, horzional_interval, np.squeeze(data_grid[k,:]), left=np.nan, right=np.nan,
                               period=None)
    data_grid_interp[np.isnan(interp_grid)]=np.nan
    data_grid_interp=data_grid_interp.astype(np.float32)
    return data_grid_interp


def gradient_climatology_check(depth,tem,meta):
    levels=meta.levels
    kflagt=np.zeros(levels,int)
    if(levels<=3):  #not check for few levels profiles
        kflagt = np.zeros(levels, int)
        _=np.nan
        return kflagt,_,_,_

    try:
        isData = np.logical_and(depth.mask == False, tem.mask == False)
    except:
        depth=ma.array(depth,mask=np.isnan(depth))
        tem = ma.array(tem, mask=np.isnan(tem))
        isData = np.logical_and(depth.mask == False, tem.mask == False)

    rlat=meta.lat
    rlon=meta.lon
    month=meta.month
    typ3=meta.typ3

    ### central difference of the T_gradient, and records the depth interval of level k-1 and k+1.
    t1=np.diff(tem)
    t_left=t1[0:-1]
    t_right=t1[1:]
    d1=np.diff(depth)
    d_left=d1[0:-1]
    d_right=d1[1:]
    distance_3points=d_left+d_right
    distance_3points=np.concatenate(([0],distance_3points,[d1[-1]]))
    dtdz=(t_left+t_right)/(d_left+d_right)
    dtdz=np.concatenate(([np.nan],dtdz,[t1[-1]/d1[-1]]))

    #if depth intreval of level k-1 and k+1 are less than 10m, increase the number of levels and cauculates the mean gradient in Function 'profile_mean_gradient_QC'
    makeMean_gradient=np.zeros(levels,int)
    makeMean_gradient[distance_3points<10]=1
    dtdz_makeMeangradient=profile_mean_gradient_QC(meta,tem,depth,makeMean_gradient)
    dtdz[np.logical_and(makeMean_gradient==1,~np.isnan(dtdz_makeMeangradient))]=dtdz_makeMeangradient[np.logical_and(makeMean_gradient==1,~np.isnan(dtdz_makeMeangradient))]

 
    distance_3points=np.round(distance_3points)
    distance_flag=distance_3points-10+1
    distance_flag[distance_flag>=151]=np.nan  #no check for depth interval greater than 160 meters
    distance_flag[distance_flag<0]=1
    distance_flag[makeMean_gradient==1]=1
   

    # find grid-index for MIN/MAX-fields from lat/lon values
    if (rlon > 180 and rlon<=360):
        rlon=rlon-360
    try:
        jy=np.where(np.logical_and(rlat>const.Grad_lat_bound[0,:] , rlat <= const.Grad_lat_bound[1,:]))[0][0]  #纬度
        ix = np.where(np.logical_and(rlon > const.Grad_lon_bound[0, :], rlon <= const.Grad_lon_bound[1, :]))[0][0]  #经度
    except:
        kflagt = np.zeros(levels, int)
        _=np.nan
        return kflagt,_,_,_

    # find depth-index for MIN/MAX-fields from depth values
    depth_index=[]
    for k in range(levels):
        if(~isData[k]):
            depth_index.append(np.nan)
            continue
        try:
            depth_index.append(np.where(np.logical_and(depth[k] >= const.Grad_std_depth_bound[0, :], depth[k] < const.Grad_std_depth_bound[1, :]))[0][0])
        except:
            depth_index.append(np.nan)

    # find the local momthly gradient cimatology upper and lower bounds from IAP-TG-range climatology
    Q05_grid_interp=climatology_horzional_interp(const.Gradmin,ix,jy,const.interp_grid,month)
    Q995_grid_interp=climatology_horzional_interp(const.Gradmax,ix,jy,const.interp_grid,month)


    depth_index=np.array(depth_index)
    index_NaN=np.logical_or(np.isnan(depth_index),np.isnan(distance_flag))
    depth_index=depth_index.astype(int)
    depth_index[index_NaN]=0
    distance_flag=distance_flag.astype(int)
    distance_flag[index_NaN] = 1
    Gradmin_array = Q05_grid_interp[depth_index, distance_flag-1]
    Gradmax_array = Q995_grid_interp[depth_index, distance_flag-1]
    Gradmin_array[index_NaN]=const.DTDZminover
    Gradmax_array[index_NaN]=const.DTDZmaxover
    Gradmax_array[Gradmax_array>const.DTDZmaxover]=const.DTDZmaxover
    Gradmin_array[Gradmin_array<const.DTDZminover]=const.DTDZminover
    Gradmin_array[np.isnan(Gradmin_array)]=const.DTDZminover
    Gradmax_array[np.isnan(Gradmax_array)]=const.DTDZmaxover


    # input torlerance and start flagging
    if('PFL' in typ3 or 'CTD' in typ3 or 'GLD' in typ3 or 'Argo' in typ3):
        index2=depth<(np.nanmax(depth)-10)
        index3=depth<=2000
        index4=makeMean_gradient==1
        index1=np.logical_and.reduce([index2,index3,index4]) 
        if('GLD' in typ3):
            flag_noSignleSide=np.logical_or((dtdz[index1==0] < Gradmin_array[index1==0] - np.abs(Gradmin_array[index1==0])*0.01),(dtdz[index1==0] > Gradmax_array[index1==0] + np.abs(Gradmax_array[index1==0])*0.01))
            flag_SignleSide=np.logical_or((dtdz[index1==1] < Gradmin_array[index1==1] - np.abs(Gradmin_array[index1==1])*0.15),(dtdz[index1==1] > Gradmax_array[index1==1] + np.abs(Gradmax_array[index1==1])*0.15))
        else:
            flag_noSignleSide=np.logical_or((dtdz[index1==0] < Gradmin_array[index1==0] - np.abs(Gradmin_array[index1==0])*0.1),(dtdz[index1==0] > Gradmax_array[index1==0] + np.abs(Gradmax_array[index1==0])*0.1))
            flag_SignleSide=np.logical_or((dtdz[index1==1] < Gradmin_array[index1==1] - np.abs(Gradmin_array[index1==1])*0.2),(dtdz[index1==1] > Gradmax_array[index1==1] + np.abs(Gradmax_array[index1==1])*0.2))
        kflagt[index1 == 0] = flag_noSignleSide
        kflagt[index1 == 1] = flag_SignleSide
    elif('XBT' in typ3 or 'xbt' in typ3):
        index1=depth>1000
        flag_upper1000=np.logical_or((dtdz[index1==0] < Gradmin_array[index1==0] - np.abs(Gradmin_array[index1==0])*0.01),(dtdz[index1==0] > Gradmax_array[index1==0] + np.abs(Gradmax_array[index1==0])*0.01))
        kflagt[index1 == 0] = flag_upper1000
        flag_T5=np.logical_or((dtdz[index1==1] < Gradmin_array[index1==1] - np.abs(Gradmin_array[index1==1])*0.3),(dtdz[index1==1] > Gradmax_array[index1==1] + np.abs(Gradmax_array[index1==1])*0.3))
        kflagt[index1 == 1] = flag_T5
    else:
        index2=depth>(np.nanmax(depth)-10)
        index3=depth<=2000
        index4=makeMean_gradient
        index1 = np.logical_and.reduce([index2, index3, index4]) 
        flag_noSignleSide=np.logical_or((dtdz[index1==0] < Gradmin_array[index1==0] - np.abs(Gradmin_array[index1==0])*0.01),(dtdz[index1==0] > Gradmax_array[index1==0] + np.abs(Gradmax_array[index1==0])*0.01))
        flag_SignleSide = np.logical_or(
            (dtdz[index1 == 1] < Gradmin_array[index1 == 1] - np.abs(Gradmin_array[index1 == 1]) * 0.2),
            (dtdz[index1 == 1] > Gradmax_array[index1 == 1] + np.abs(Gradmax_array[index1 == 1]) * 0.2))
        kflagt[index1 == 0] = flag_noSignleSide
        kflagt[index1 == 1] = flag_SignleSide


    if(not('XBT' in typ3 or 'xbt' in typ3)):  #no check for the 0-10m observations except XBT profiles
        kflagt[depth<10]=0

    return kflagt,dtdz,Gradmin_array,Gradmax_array

if __name__ == '__main__':
    import numpy as np
    # from pyinstrument import Profiler
    class metaData(object):
        def __init__(self):
            pass

    meta=metaData()
    meta.lat=-26.08
    meta.lon=112.28
    tem=[22.9559993743897,22.9459991455078,22.9459991455078,22.9459991455078,22.9559993743897,22.9559993743897,22.9559993743897,22.9650001525879,22.9650001525879,22.9559993743897,22.9559993743897,22.9559993743897,22.9559993743897,22.9650001525879,22.9559993743897,22.9559993743897,22.9559993743897,22.9559993743897,22.9559993743897,22.9459991455078,22.9459991455078,22.9169998168945,22.9270000457764,22.9169998168945,22.9169998168945,22.9169998168945,22.9169998168945,22.9169998168945,22.9169998168945,22.9080009460449,22.8980007171631,22.8889999389648,22.8789997100830,22.8789997100830,22.8789997100830,22.8789997100830,22.8789997100830,22.8789997100830,22.8789997100830,22.8789997100830,22.8700008392334,22.8789997100830,22.8789997100830,22.8700008392334,22.8700008392334,22.8789997100830,22.8700008392334,22.8789997100830,22.8700008392334,22.8789997100830,22.8700008392334,22.8789997100830,22.8700008392334,22.8700008392334,22.8789997100830,22.8600006103516,22.8700008392334,22.8700008392334,22.8700008392334,22.8789997100830,22.8700008392334,22.8700008392334,22.8600006103516,22.8600006103516,22.8600006103516,22.8500003814697,22.8409996032715,22.8409996032715,22.8309993743897,22.7929992675781,22.7450008392334,22.7070007324219,22.6779994964600,22.6490001678467,22.6389999389648,22.6200008392334,22.5919990539551,22.5149993896484,22.4479999542236,22.3719997406006,22.2849998474121,22.2280006408691,22.1989994049072,22.1040000915527,21.9319992065430,21.7420005798340,21.6369991302490,21.5799999237061,21.5510005950928,21.5319995880127,21.5130004882813,21.5130004882813,21.4939994812012,21.4850006103516,21.4559993743897,21.3990001678467,21.3710002899170,21.3610000610352,21.3330001831055,21.2759990692139,21.2089996337891,21.1809997558594,21.1809997558594,21.1709995269775,21.1429996490479,21.1329994201660,21.1240005493164,21.1140003204346,21.0949993133545,21.0380001068115,20.9529991149902,20.8959999084473,20.8670005798340,20.8390007019043,20.8299999237061,20.8199996948242,20.8010005950928,20.8010005950928,20.8010005950928,20.7919998168945,20.7819995880127,20.7539997100830,20.7059993743897,20.6590003967285,20.6210002899170,20.6019992828369,20.5930004119873,20.5830001831055,20.5639991760254,20.5450000762939,20.5359992980957,20.5170001983643,20.4890003204346,20.4599990844727,20.4130001068115,20.3840007781982,20.3369998931885,20.3180007934570,20.2709999084473,20.1669998168945,20.0540008544922,20.0160007476807,19.9969997406006,19.9500007629395,19.8929996490479,19.8549995422363,19.8080005645752,19.7700004577637,19.7509994506836,19.7509994506836,19.7509994506836,19.7509994506836,19.7420005798340,19.7320003509522,19.7420005798340,19.7420005798340,19.7420005798340,19.7320003509522,19.6849994659424,19.6100006103516,19.5809993743897,19.5809993743897,19.5629997253418,19.5629997253418,19.5629997253418,19.5629997253418,19.5529994964600,19.5720005035400,19.5629997253418,19.5529994964600,19.5440006256104,19.5529994964600,19.5529994964600,19.5529994964600,19.5629997253418,19.5529994964600,19.5629997253418,19.5529994964600,19.5629997253418,19.5720005035400,19.5529994964600,19.5529994964600,19.5060005187988,19.4869995117188,19.4589996337891,19.4489994049072,19.4489994049072,19.4489994049072,19.4400005340576,19.4400005340576,19.4309997558594,19.4120006561279,19.4120006561279,19.3929996490479,19.3929996490479,19.3929996490479,19.3740005493164,19.3649997711182,19.3460006713867,19.3360004425049,19.3169994354248,19.2800006866455,19.2509994506836,19.2509994506836,19.2140007019043,19.1949996948242,19.1849994659424,19.1849994659424,19.1669998168945,19.1569995880127,19.1380004882813,19.1200008392334,19.1200008392334,19.1100006103516,19.1009998321533,19.0820007324219,19.0720005035400,19.0540008544922,19.0249996185303,18.9969997406006,18.9500007629395,18.9120006561279,18.9029998779297,18.8840007781982,18.8649997711182,18.8279991149902,18.7989997863770,18.7810001373291,18.7619991302490,18.7329998016357,18.7240009307861,18.7240009307861,18.7240009307861,18.7150001525879,18.7150001525879,18.7240009307861,18.7150001525879,18.7240009307861,18.7150001525879,18.7049999237061,18.6959991455078,18.6959991455078,18.6860008239746,18.6860008239746,18.6770000457764,18.6860008239746,18.6770000457764,18.6679992675781,18.6679992675781,18.6770000457764,18.6679992675781,18.6580009460449,18.6490001678467,18.6019992828369,18.5830001831055,18.5359992980957,18.4890003204346,18.4790000915527,18.4230003356934,18.3759994506836,18.3570003509522,18.3570003509522,18.3479995727539,18.3290004730225,18.3190002441406,18.3290004730225,18.3190002441406,18.3099994659424,18.2819995880127,18.2350006103516,18.2159996032715,18.1970005035400,18.1879997253418,18.1779994964600,18.1599998474121,18.1599998474121,18.1410007476807,18.1219997406006,18.0939998626709,18.0279998779297,18.0090007781982,17.9430007934570,17.9249992370605,17.8959999084473,17.8780002593994,17.8680000305176,17.8589992523193,17.8490009307861,17.8490009307861,17.8309993743897,17.8209991455078,17.8120002746582,17.8020000457764,17.8020000457764,17.7929992675781,17.7929992675781,17.7740001678467,17.7460002899170,17.7180004119873,17.6800003051758,17.6609992980957,17.6140003204346,17.5769996643066,17.5389995574951,17.5109996795654,17.4829998016357,17.4740009307861,17.4740009307861,17.4449996948242,17.4169998168945,17.3889999389648,17.3610000610352,17.3610000610352,17.3330001831055,17.3139991760254,17.3040008544922,17.2759990692139,17.2569999694824,17.2569999694824,17.2290000915527,17.2199993133545,17.1919994354248,17.1539993286133,17.1259994506836,17.1070003509522,17.0790004730225,17.0699996948242,17.0699996948242,17.0410003662109,17.0319995880127,16.9939994812012,16.9570007324219,16.9379997253418,16.9470005035400,16.9290008544922,16.9190006256104,16.8999996185303,16.8719997406006,16.8719997406006,16.8630008697510,16.8349990844727,16.7970008850098,16.7779998779297,16.7600002288818,16.7409992218018,16.7029991149902,16.6840000152588,16.6749992370605,16.6749992370605,16.6560001373291,16.6560001373291,16.6369991302490,16.6000003814697,16.5620002746582,16.5529994964600,16.5340003967285,16.5249996185303,16.5149993896484,16.5340003967285,16.5149993896484,16.5149993896484,16.5060005187988,16.5149993896484,16.5060005187988,16.5060005187988,16.4960002899170,16.4960002899170,16.4960002899170,16.4869995117188,16.4960002899170,16.4780006408691,16.4680004119873,16.4680004119873,16.4400005340576,16.4020004272461,16.3740005493164,16.3269996643066,16.2800006866455,16.2049999237061,16.1860008239746,16.1580009460449,16.1490001678467,16.1580009460449,16.1490001678467,16.1110000610352,16.0919990539551,16.0739994049072,16.0739994049072,16.0550003051758,16.0550003051758,16.0359992980957,16.0270004272461,15.9980001449585,15.9890003204346,15.9799995422363,15.9510002136230,15.9510002136230,15.9510002136230,15.9420003890991,15.9420003890991,15.9329996109009,15.9139995574951,15.9040002822876,15.8669996261597,15.8479995727539,15.7919998168945,15.7449998855591,15.7159996032715,15.7159996032715,15.7069997787476,15.6879997253418,15.6499996185303,15.6219997406006,15.6029996871948,15.5659999847412,15.5469999313355,15.5190000534058,15.4910001754761,15.4809999465942,15.3489999771118,15.1990003585815,15.1239995956421,15.0760002136230,15.0579996109009,15.0480003356934,15.0480003356934,15.0109996795654,14.9449996948242,14.8979997634888,14.8690004348755,14.8319997787476,14.7749996185303,14.6709995269775,14.6149997711182,14.5869998931885,14.5869998931885,14.5869998931885,14.5869998931885,14.5869998931885,14.5769996643066,14.5869998931885,14.5769996643066,14.5679998397827,14.5389995574951,14.5209999084473,14.4919996261597,14.4639997482300,14.4259996414185,14.3789997100830,14.3409996032715,14.2939996719360,14.1339998245239,14.0299997329712,13.9540004730225,13.8599996566772,13.8219995498657,13.7749996185303,13.7650003433228,13.7370004653931,13.7270002365112,13.7180004119873,13.7180004119873,13.6800003051758,13.6610002517700,13.6140003204346,13.5950002670288,13.5850000381470,13.5670003890991,13.5480003356934,13.5290002822876,13.5190000534058,13.4809999465942,13.4619998931885,13.4149999618530,13.3769998550415,13.3489999771118,13.3299999237061,13.3199996948242,13.3109998703003,13.2729997634888,13.2539997100830,13.2449998855591,13.2259998321533,13.1780004501343,13.1499996185303,13.1400003433228,13.1120004653931,13.0930004119873,13.0830001831055,13.0740003585815,13.0649995803833,13.0649995803833,13.0649995803833,13.0740003585815,13.0550003051758,13.0459995269775,13.0170001983643,13.0080003738403,12.9980001449585,12.9980001449585,12.9890003204346,12.9700002670288,12.9700002670288,12.9510002136230,12.9409999847412,12.9219999313355,12.9130001068115,12.8559999465942,12.7609996795654,12.6280002593994,12.5900001525879,12.5520000457764,12.5229997634888,12.4659996032715,12.3809995651245,12.3330001831055,12.3330001831055,12.2659997940063,12.2089996337891,12.1040000915527,12.0469999313355,12.0190000534058,11.9799995422363,11.8850002288818,11.7889995574951,11.7030000686646,11.6370000839233,11.5699996948242,11.4930000305176,11.3500003814697,11.1960000991821,10.8889999389648,10.7259998321533,10.6099996566772,10.5139999389648,10.4370002746582,10.4079999923706,10.3889999389648,10.3789997100830,10.3400001525879,10.4370002746582,10.4079999923706,10.3979997634888,10.3889999389648,10.3889999389648,10.3690004348755,10.3599996566772,10.3690004348755,10.3690004348755,10.3690004348755,10.3599996566772,10.3599996566772,10.3690004348755,10.3599996566772,10.3500003814697,10.3599996566772,10.3599996566772,10.3690004348755,10.3599996566772,10.3500003814697,10.3690004348755,10.3690004348755,10.3690004348755,10.3599996566772,10.3599996566772,10.3599996566772,10.3599996566772,10.3690004348755,10.3599996566772,10.3599996566772,10.3690004348755,10.3690004348755,10.3599996566772,10.3690004348755,10.3789997100830,10.3599996566772,10.3690004348755,10.3500003814697,10.3690004348755,10.3789997100830,10.3889999389648,10.3789997100830,10.3889999389648,10.3889999389648,10.3789997100830,10.3889999389648,10.3789997100830,10.3889999389648,10.3889999389648,10.3979997634888,10.3979997634888,10.3979997634888,10.4079999923706,10.4079999923706,10.4079999923706,10.3979997634888,10.4079999923706,10.4180002212524,10.4079999923706,10.4079999923706,10.4079999923706,10.4180002212524,10.4180002212524,10.4180002212524,10.4180002212524,10.4270000457764,10.4270000457764,10.4370002746582,10.4460000991821,10.4370002746582,10.4370002746582,10.4460000991821,10.4460000991821,10.4560003280640,10.4659996032715,10.4750003814697,10.4849996566772,10.4849996566772,10.4949998855591,10.5039997100830,10.4949998855591,10.5039997100830,10.4949998855591,10.5039997100830,10.5139999389648,10.5039997100830,10.5139999389648,10.5329999923706,10.5329999923706,10.5329999923706,10.5240001678467,10.5240001678467,10.5329999923706,10.5329999923706,10.5329999923706,10.5520000457764,10.5430002212524,10.5620002746582,10.5810003280640,10.5810003280640,10.5909996032715,10.5810003280640,10.5909996032715,10.5810003280640,10.5909996032715,10.6009998321533,10.6009998321533,10.5909996032715,10.6009998321533,10.6009998321533,10.5909996032715,10.5909996032715,10.6009998321533,10.6009998321533,10.6099996566772,10.6199998855591,10.6099996566772,10.6099996566772]
    depth=[4.01379013061523,4.68260002136231,5.35135984420776,6.02008008956909,6.68874979019165,7.35737991333008,8.02595996856690,8.69449996948242,9.36299037933350,10.0314397811890,10.6998395919800,11.3682003021240,12.0365104675293,12.7047796249390,13.3730001449585,14.0411796569824,14.7093095779419,15.3774003982544,16.0454406738281,16.7134399414063,17.3813896179199,18.0492992401123,18.7171592712402,19.3849792480469,20.0527496337891,20.7204799652100,21.3881607055664,22.0557994842529,22.7233905792236,23.3909397125244,24.0584392547607,24.7259006500244,25.3933105468750,26.0606803894043,26.7280006408691,27.3952808380127,28.0625095367432,28.7297000885010,29.3968391418457,30.0639400482178,30.7309894561768,31.3980007171631,32.0649604797363,32.7318801879883,33.3987503051758,34.0655784606934,34.7323608398438,35.3991012573242,36.0657882690430,36.7324409484863,37.3990402221680,38.0656013488770,38.7321090698242,39.3985786437988,40.0649986267090,40.7313804626465,41.3977088928223,42.0639991760254,42.7302398681641,43.3964385986328,44.0625915527344,44.7286987304688,45.3947601318359,46.0607795715332,46.7267494201660,47.3926811218262,48.0585594177246,48.7243995666504,49.3901901245117,50.0559387207031,50.7216415405273,51.3872985839844,52.0529098510742,52.7184791564941,53.3839988708496,54.0494804382324,54.7149085998535,55.3802986145020,56.0456390380859,56.7109413146973,57.3761901855469,58.0414009094238,58.7065582275391,59.3716812133789,60.0367507934570,60.7017784118652,61.3667602539063,62.0317001342773,62.6965904235840,63.3614387512207,64.0262374877930,64.6910018920898,65.3557128906250,66.0203781127930,66.6849975585938,67.3495788574219,68.0141067504883,68.6785964965820,69.3430404663086,70.0074386596680,70.6717910766602,71.3360977172852,72.0003585815430,72.6645812988281,73.3287506103516,73.9928817749023,74.6569595336914,75.3209991455078,75.9849929809570,76.6489410400391,77.3128433227539,77.9766998291016,78.6405105590820,79.3042831420898,79.9680023193359,80.6316833496094,81.2953109741211,81.9589004516602,82.6224365234375,83.2859420776367,83.9493865966797,84.6128005981445,85.2761611938477,85.9394836425781,86.6027526855469,87.2659835815430,87.9291610717773,88.5923004150391,89.2553863525391,89.9184417724609,90.5814437866211,91.2444000244141,91.9073104858398,92.5701828002930,93.2330017089844,93.8957824707031,94.5585098266602,95.2211990356445,95.8838424682617,96.5464401245117,97.2089920043945,97.8714981079102,98.5339584350586,99.1963806152344,99.8587493896484,100.521080017090,101.183357238770,101.845596313477,102.507789611816,103.169937133789,103.832038879395,104.494102478027,105.156112670898,105.818077087402,106.480003356934,107.141876220703,107.803710937500,108.465499877930,109.127243041992,109.788940429688,110.450592041016,111.112197875977,111.773757934570,112.435279846191,113.096748352051,113.758178710938,114.419563293457,115.080902099609,115.742187500000,116.403442382813,117.064636230469,117.725799560547,118.386909484863,119.047981262207,119.708999633789,120.369979858398,121.030906677246,121.691802978516,122.352638244629,123.013442993164,123.674186706543,124.334899902344,124.995559692383,125.656181335449,126.316749572754,126.977279663086,127.637756347656,128.298202514648,128.958587646484,129.618942260742,130.279235839844,130.939498901367,131.599716186523,132.259872436523,132.919998168945,133.580078125000,134.240112304688,134.900100708008,135.560043334961,136.219940185547,136.879791259766,137.539596557617,138.199356079102,138.859085083008,139.518753051758,140.178375244141,140.837966918945,141.497497558594,142.156982421875,142.816436767578,143.475845336914,144.135192871094,144.794509887695,145.453781127930,146.113006591797,146.772186279297,147.431304931641,148.090393066406,148.749435424805,149.408447265625,150.067382812500,150.726303100586,151.385162353516,152.043975830078,152.702743530273,153.361480712891,154.020156860352,154.678802490234,155.337387084961,155.995941162109,156.654434204102,157.312896728516,157.971313476563,158.629684448242,159.287994384766,159.946273803711,160.604507446289,161.262695312500,161.920837402344,162.578933715820,163.236984252930,163.895004272461,164.552963256836,165.210876464844,165.868743896484,166.526580810547,167.184356689453,167.842102050781,168.499786376953,169.157440185547,169.815032958984,170.472595214844,171.130111694336,171.787582397461,172.445007324219,173.102386474609,173.759704589844,174.417007446289,175.074234008789,175.731445312500,176.388595581055,177.045700073242,177.702758789063,178.359786987305,179.016754150391,179.673675537109,180.330566406250,180.987396240234,181.644195556641,182.300933837891,182.957641601563,183.614303588867,184.270904541016,184.927474975586,185.583999633789,186.240478515625,186.896911621094,187.553298950195,188.209640502930,188.865936279297,189.522186279297,190.178405761719,190.834564208984,191.490676879883,192.146743774414,192.802780151367,193.458755493164,194.114700317383,194.770584106445,195.426437377930,196.082244873047,196.738006591797,197.393707275391,198.049377441406,198.705001831055,199.360580444336,200.016113281250,200.671600341797,201.327041625977,201.982437133789,202.637786865234,203.293106079102,203.948364257813,204.603576660156,205.258743286133,205.913879394531,206.568954467773,207.223999023438,207.878982543945,208.533935546875,209.188842773438,209.843704223633,210.498504638672,211.153274536133,211.807998657227,212.462677001953,213.117309570313,213.771896362305,214.426437377930,215.080932617188,215.735397338867,216.389801025391,217.044158935547,217.698486328125,218.352752685547,219.006973266602,219.661163330078,220.315307617188,220.969390869141,221.623443603516,222.277435302734,222.931396484375,223.585311889648,224.239181518555,224.893005371094,225.546783447266,226.200515747070,226.854202270508,227.507843017578,228.161437988281,228.814987182617,229.468505859375,230.121963500977,230.775375366211,231.428756713867,232.082077026367,232.735366821289,233.388595581055,234.041793823242,234.694946289063,235.348037719727,236.001098632813,236.654113769531,237.307083129883,237.960006713867,238.612884521484,239.265716552734,239.918502807617,240.571243286133,241.223937988281,241.876586914063,242.529205322266,243.181762695313,243.834274291992,244.486755371094,245.139175415039,245.791564941406,246.443893432617,247.096191406250,247.748443603516,248.400634765625,249.052795410156,249.704910278320,250.356979370117,251.009002685547,251.660980224609,252.312911987305,252.964797973633,253.616638183594,254.268432617188,254.920196533203,255.571899414063,256.223571777344,256.875183105469,257.526763916016,258.178283691406,258.829772949219,259.481201171875,260.132598876953,260.783935546875,261.435241699219,262.086486816406,262.737701416016,263.388885498047,264.040008544922,264.691070556641,265.342102050781,265.993103027344,266.644042968750,267.294952392578,267.945800781250,268.596588134766,269.247344970703,269.898071289063,270.548736572266,271.199371337891,271.849945068359,272.500488281250,273.151000976563,273.801452636719,274.451843261719,275.102203369141,275.752502441406,276.402770996094,277.053009033203,277.703186035156,278.353302001953,279.003387451172,279.653442382813,280.303436279297,280.953399658203,281.603302001953,282.253173828125,282.902984619141,283.552764892578,284.202484130859,284.852172851563,285.501800537109,286.151397705078,286.800933837891,287.450439453125,288.099914550781,288.749298095703,289.398681640625,290.048004150391,290.697265625000,291.346496582031,291.995697021484,292.644836425781,293.293945312500,293.942993164063,294.592010498047,295.240966796875,295.889892578125,296.538757324219,297.187591552734,297.836364746094,298.485107421875,299.133789062500,299.782440185547,300.431030273438,301.079589843750,301.728118896484,302.376586914063,303.024993896484,303.673370361328,304.321716308594,304.970001220703,305.618225097656,306.266448974609,306.914581298828,307.562713623047,308.210754394531,308.858795166016,309.506744384766,310.154693603516,310.802551269531,311.450408935547,312.098175048828,312.745941162109,313.393646240234,314.041290283203,314.688903808594,315.336486816406,315.984008789063,316.631469726563,317.278900146484,317.926300048828,318.573638916016,319.220947265625,319.868194580078,320.515411376953,321.162567138672,321.809692382813,322.456756591797,323.103790283203,323.750762939453,324.397705078125,325.044586181641,325.691436767578,326.338226318359,326.984985351563,327.631713867188,328.278381347656,328.924987792969,329.571594238281,330.218109130859,330.864593505859,331.511047363281,332.157440185547,332.803802490234,333.450103759766,334.096374511719,334.742584228516,335.388763427734,336.034881591797,336.680969238281,337.326995849609,337.972991943359,338.618927001953,339.264831542969,339.910705566406,340.556518554688,341.202270507813,341.847991943359,342.493682861328,343.139312744141,343.784912109375,344.430450439453,345.075927734375,345.721405029297,346.366790771484,347.012145996094,347.657470703125,348.302764892578,348.947967529297,349.593170166016,350.238311767578,350.883392333984,351.528442382813,352.173431396484,352.818389892578,353.463317871094,354.108184814453,354.752990722656,355.397766113281,356.042510986328,356.687194824219,357.331848144531,357.976440429688,358.621002197266,359.265502929688,359.909973144531,360.554382324219,361.198760986328,361.843078613281,362.487365722656,363.131591796875,363.775787353516,364.419952392578,365.064025878906,365.708099365234,366.352111816406,366.996093750000,367.640014648438,368.283874511719,368.927703857422,369.571502685547,370.215240478516,370.858947753906,371.502593994141,372.146209716797,372.789764404297,373.433288574219,374.076751708984,374.720184326172,375.363555908203,376.006896972656,376.650177001953,377.293426513672,377.936645507813,378.579803466797,379.222900390625,379.865966796875,380.509002685547,381.151977539063,381.794921875000,382.437805175781,383.080627441406,383.723449707031,384.366180419922,385.008911132813,385.651550292969,386.294189453125,386.936737060547,387.579284667969,388.221771240234,388.864196777344,389.506591796875,390.148925781250,390.791229248047,391.433502197266,392.075714111328,392.717864990234,393.359985351563,394.002075195313,394.644104003906,395.286102294922,395.928039550781,396.569946289063,397.211791992188,397.853607177734,398.495361328125,399.137084960938,399.778747558594,400.420379638672,401.061950683594,401.703491210938,402.345001220703,402.986450195313,403.627838134766,404.269195556641,404.910522460938,405.551788330078,406.192993164063,406.834167480469,407.475311279297,408.116394042969,408.757446289063,409.398437500000,410.039398193359,410.680297851563,411.321166992188,411.961975097656,412.602752685547,413.243469238281,413.884155273438,414.524810791016,415.165374755859,415.805938720703,416.446441650391,417.086914062500,417.727294921875,418.367675781250,419.007995605469,419.648284912109,420.288513183594,420.928710937500,421.568847656250,422.208953857422,422.848999023438,423.489013671875,424.128967285156,424.768890380859,425.408752441406,426.048583984375,426.688354492188,427.328094482422,427.967803955078,428.607452392578,429.247039794922,429.886596679688,430.526123046875,431.165588378906,431.804992675781,432.444366455078,433.083709716797,433.722991943359]
    depth=np.array(depth)
    tem=np.array(tem)
    meta.month=1
    meta.typ3='XBT'
    meta.levels=len(depth)
    [kflagt,_,Gradmin_array,_]=gradient_climatology_check(depth,tem,meta)
    print(kflagt)
